package uk.co.polycode.neo4j.data;

import com.fasterxml.jackson.annotation.JsonInclude;
import org.springframework.data.neo4j.core.schema.GeneratedValue;
import org.springframework.data.neo4j.core.schema.Id;
import org.springframework.data.neo4j.core.schema.Node;
import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.schema.Relationship;

import java.math.BigInteger;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Person
 * A person (alive, dead, undead, or fictional).
 *             This file was generated by OWL to Java as a transformation of the Schema.org schema Version 14.0.
 *             Schema.org is released under the Creative Commons Attribution-ShareAlike License (version 3.0).
 *             The Schema.org license is applicable to the generated source files and the license is available from
 *             <a href="https://creativecommons.org/licenses/by-sa/3.0/">...</a>
 *
 */
@Node
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Person { // extends Thing {

	/**
	 * The synthetic key for this item.
	 */
	@Id
	@GeneratedValue
	@Property(name="id")
	public UUID id;

	/**
	 * An alias for the item.
	 * (From Thing)
	 */
	public String alternateName;

	/**
	 * A description of the item.
	 * (From Thing)
	 */
	public String description;

	/**
	 * The identifier property represents any kind of identifier for any kind of <a class="localLink" href="https://schema.org/Thing">Thing</a>, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See <a href="/docs/datamodel.html#identifierBg">background notes</a> for more details.
	 * (From Thing)
	 */
	public String identifier;

	/**
	 * An image of the item. This can be a <a class="localLink" href="https://schema.org/URL">URL</a> or a fully described <a class="localLink" href="https://schema.org/ImageObject">ImageObject</a>.
	 * (From Thing)
	 */
	public String image;

	/**
	 * The name of the item.
	 * (From Thing)
	 */
	public String name;

	/**
	 * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
	 * (From Thing)
	 */
	public String sameAs;

	/**
	 * An additional name for a Person, can be used for a middle name.
	 */
	public String additionalName;

	/**
	 * Physical address of the item.
	 * TODO: Recall why the Lists needed to be initialised. This makes it awkward to deserialize the JSON with missing lists.
	 */
	@Relationship(type = "HAS_ADDRESS", direction = Relationship.Direction.OUTGOING)
	public List<PostalAddress> address = new ArrayList<>();

	/**
	 * An organization that this person is affiliated with. For example, a school/university, a club, or a team.
	 */
	@Relationship(type = "HAS_AFFILIATION", direction = Relationship.Direction.OUTGOING)
	public List<Organization> affiliation = new ArrayList<>();

	/**
	 * An organization that the person is an alumni of.
	 */
	@Relationship(type = "IS_ALUMNI_OF", direction = Relationship.Direction.OUTGOING)
	public List<Organization> alumniOf = new ArrayList<>();

	/**
	 * An award won by or for this item.
	 */
	public String award;

	/**
	 * The place where the person was born.
	 * TODO: define singe relationship and test
	 */
	@Relationship(type = "HAS_BIRTH_PLACE", direction = Relationship.Direction.OUTGOING)
	public List<Place> birthPlace = new ArrayList<>();

	/**
	 * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	 */
	@Relationship(type = "HAS_BRAND", direction = Relationship.Direction.OUTGOING)
	public List<Organization> brand = new ArrayList<>();

	/**
	 * A child of the person.
	 */
	@Relationship(type = "HAS_CHILD", direction = Relationship.Direction.OUTGOING)
	public List<Person> children = new ArrayList<>();

	/**
	 * A colleague of the person.
	 */
	@Relationship(type = "IS_COLLEAGUE_OF", direction = Relationship.Direction.OUTGOING)
	public List<Person> colleague = new ArrayList<>();

	/**
	 * The place where the person died.
	 */
	@Relationship(type = "HAS_DEATH_PLACE", direction = Relationship.Direction.OUTGOING)
	public List<Place> deathPlace = new ArrayList<>();

	/**
	 * Email address.
	 */
	public String email;

	/**
	 * Family name. In the U.S., the last name of a Person.
	 */
	public String familyName;

	/**
	 * The most generic uni-directional social relation.
	 */
	@Relationship(type = "FOLLOWS", direction = Relationship.Direction.OUTGOING)
	public List<Person> follows = new ArrayList<>();

	/**
	 * Gender of something, typically a <a class="localLink" href="https://schema.org/Person">Person</a>, but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The <a class="localLink" href="https://schema.org/gender">gender</a> property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender <a class="localLink" href="https://schema.org/SportsTeam">SportsTeam</a> can be indicated with a text value of "Mixed".
	 */
	public String gender;

	/**
	 * Given name. In the U.S., the first name of a Person.
	 */
	public String givenName;

	/**
	 * A credential awarded to the Person or Organization.
	 */
	public String hasCredential;

	/**
	 * The Person's occupation. For past professions, use Role for expressing dates.
	 */
	public String hasOccupation;

	/**
	 * The height of the item.
	 */
	public BigInteger height;

	/**
	 * A contact location for a person's residence.
	 */
	@Relationship(type = "HAS_HOME_LOCATION", direction = Relationship.Direction.OUTGOING)
	public List<Place> homeLocation = new ArrayList<>();

	/**
	 * An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
	 */
	public String honorificPrefix;

	/**
	 * An honorific suffix following a Person's name such as M.D. /PhD/MSCSW.
	 */
	public String honorificSuffix;

	/**
	 * The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	 */
	public String isicV4;

	/**
	 * The job title of the person (for example, Financial Manager).
	 */
	public String jobTitle;

	/**
	 * The most generic bi-directional social/work relation.
	 */
	@Relationship(type = "KNOWS", direction = Relationship.Direction.OUTGOING)
	public List<Person> knows = new ArrayList<>();

	/**
	 * Of a <a class="localLink" href="https://schema.org/Person">Person</a>, and less typically of an <a class="localLink" href="https://schema.org/Organization">Organization</a>, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or <a class="localLink" href="https://schema.org/JobPosting">JobPosting</a> descriptions.
	 * (Expanded subclass of Thing to literal association)
	 */
	@Relationship(type = "KNOWS_ABOUT", direction = Relationship.Direction.OUTGOING)
	public List<Person> knowsAboutPerson = new ArrayList<>();

	/**
	 * Of a <a class="localLink" href="https://schema.org/Person">Person</a>, and less typically of an <a class="localLink" href="https://schema.org/Organization">Organization</a>, to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or <a class="localLink" href="https://schema.org/JobPosting">JobPosting</a> descriptions.
	 * (Expanded subclass of Thing to literal association)
	 * TODO: Can we query either the Person or the Organization on the same named relationship?
	 */
	@Relationship(type = "KNOWS_ABOUT_ORGANIZATION", direction = Relationship.Direction.OUTGOING)
	public List<Organization> knowsAboutOrganization = new ArrayList<>();

	/**
	 * Of a <a class="localLink" href="https://schema.org/Person">Person</a>, and less typically of an <a class="localLink" href="https://schema.org/Organization">Organization</a>, to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the <a href="http://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.
	 */
	public String knowsLanguage;

	/**
	 * An Organization (or ProgramMembership) to which this Person or Organization belongs.
	 * TODO: owl-to-java this was generated as memberOf not member.
	 */
	@Relationship(type = "IS_MEMBER_OF", direction = Relationship.Direction.OUTGOING)
	public List<Organization> member = new ArrayList<>();

	/**
	 * The North American Industry Classification System (NAICS) code for a particular organization or business person.
	 */
	public String naics;

	/**
	 * Nationality of the person.
	 */
	public String nationality;

	/**
	 * A parent of this person.
	 */
	@Relationship(type = "HAS_PARENT", direction = Relationship.Direction.OUTGOING)
	public List<Person> parent = new ArrayList<>();

	/**
	 * The most generic familial relation.
	 */
	@Relationship(type = "IS_RELATED_TO", direction = Relationship.Direction.OUTGOING)
	public List<Person> relatedTo = new ArrayList<>();

	/**
	 * A sibling of the person.
	 */
	@Relationship(type = "HAS_SIBLING", direction = Relationship.Direction.OUTGOING)
	public List<Person> sibling = new ArrayList<>();

	/**
	 * A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	 */
	@Relationship(type = "HAS_SPONSOR", direction = Relationship.Direction.OUTGOING)
	public List<Person> sponsor = new ArrayList<>();

	/**
	 * The person's spouse.
	 */
	@Relationship(type = "HAS_SPOUSE", direction = Relationship.Direction.OUTGOING)
	public List<Person> spouse = new ArrayList<>();

	/**
	 * The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
	 */
	public String taxID;

	/**
	 * The telephone number.
	 */
	public String telephone;

	/**
	 * The Value-added Tax ID of the organization or person.
	 */
	public String vatID;

	/**
	 * The weight of the product or person.
	 */
	public BigInteger weight;

	/**
	 * A contact location for a person's place of work.
	 */
	@Relationship(type = "HAS_WORK_LOCATION", direction = Relationship.Direction.OUTGOING)
	public List<Place> workLocation = new ArrayList<>();

	/**
	 * Organizations that the person works for.
	 */
	@Relationship(type = "WORKS_FOR", direction = Relationship.Direction.OUTGOING)
	public List<Organization> worksFor;

	/**
	 * Date of birth.
	 */
	public ZonedDateTime birthDate;

	/**
	 * Date of death.
	 */
	public ZonedDateTime deathDate;

	/**
	 * Where to find the definition of the OWL Class used to generate this Java class.
	 */
	public static String isDefinedBy = "https://schema.org/Person";
}

